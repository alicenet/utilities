// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alicenet/utilities/internal/alicenet (interfaces: Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	proto "github.com/alicenet/alicenet/proto"
	alicenet "github.com/alicenet/utilities/internal/alicenet"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// BlockHeader mocks base method.
func (m *MockInterface) BlockHeader(arg0 context.Context, arg1 uint32) (*proto.BlockHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockHeader", arg0, arg1)
	ret0, _ := ret[0].(*proto.BlockHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockHeader indicates an expected call of BlockHeader.
func (mr *MockInterfaceMockRecorder) BlockHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockHeader", reflect.TypeOf((*MockInterface)(nil).BlockHeader), arg0, arg1)
}

// Height mocks base method.
func (m *MockInterface) Height(arg0 context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Height indicates an expected call of Height.
func (mr *MockInterfaceMockRecorder) Height(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockInterface)(nil).Height), arg0)
}

// Transaction mocks base method.
func (m *MockInterface) Transaction(arg0 context.Context, arg1 string) (*alicenet.MinedTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0, arg1)
	ret0, _ := ret[0].(*alicenet.MinedTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transaction indicates an expected call of Transaction.
func (mr *MockInterfaceMockRecorder) Transaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockInterface)(nil).Transaction), arg0, arg1)
}
