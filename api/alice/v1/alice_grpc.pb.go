// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package alicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AliceServiceClient is the client API for AliceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AliceServiceClient interface {
	// ListStores for a given address.
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	// GetStoreValue for a given address, data store and index.
	GetStoreValue(ctx context.Context, in *GetStoreValueRequest, opts ...grpc.CallOption) (*GetStoreValueResponse, error)
	// ListTransactionsForAddress that an address has participated in.
	ListTransactionsForAddress(ctx context.Context, in *ListTransactionsForAddressRequest, opts ...grpc.CallOption) (*ListTransactionsForAddressResponse, error)
	// GetBalance for an address.
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// GetTransaction contents.
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// GetBlock contents.
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	// ListBlocks starting at the most recent.
	ListBlocks(ctx context.Context, in *ListBlocksRequest, opts ...grpc.CallOption) (*ListBlocksResponse, error)
	// ListTransactions starting at the most recent.
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
}

type aliceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAliceServiceClient(cc grpc.ClientConnInterface) AliceServiceClient {
	return &aliceServiceClient{cc}
}

func (c *aliceServiceClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, "/api.alice.v1.AliceService/ListStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceServiceClient) GetStoreValue(ctx context.Context, in *GetStoreValueRequest, opts ...grpc.CallOption) (*GetStoreValueResponse, error) {
	out := new(GetStoreValueResponse)
	err := c.cc.Invoke(ctx, "/api.alice.v1.AliceService/GetStoreValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceServiceClient) ListTransactionsForAddress(ctx context.Context, in *ListTransactionsForAddressRequest, opts ...grpc.CallOption) (*ListTransactionsForAddressResponse, error) {
	out := new(ListTransactionsForAddressResponse)
	err := c.cc.Invoke(ctx, "/api.alice.v1.AliceService/ListTransactionsForAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/api.alice.v1.AliceService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/api.alice.v1.AliceService/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/api.alice.v1.AliceService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceServiceClient) ListBlocks(ctx context.Context, in *ListBlocksRequest, opts ...grpc.CallOption) (*ListBlocksResponse, error) {
	out := new(ListBlocksResponse)
	err := c.cc.Invoke(ctx, "/api.alice.v1.AliceService/ListBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliceServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/api.alice.v1.AliceService/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AliceServiceServer is the server API for AliceService service.
// All implementations should embed UnimplementedAliceServiceServer
// for forward compatibility
type AliceServiceServer interface {
	// ListStores for a given address.
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	// GetStoreValue for a given address, data store and index.
	GetStoreValue(context.Context, *GetStoreValueRequest) (*GetStoreValueResponse, error)
	// ListTransactionsForAddress that an address has participated in.
	ListTransactionsForAddress(context.Context, *ListTransactionsForAddressRequest) (*ListTransactionsForAddressResponse, error)
	// GetBalance for an address.
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// GetTransaction contents.
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	// GetBlock contents.
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	// ListBlocks starting at the most recent.
	ListBlocks(context.Context, *ListBlocksRequest) (*ListBlocksResponse, error)
	// ListTransactions starting at the most recent.
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
}

// UnimplementedAliceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAliceServiceServer struct {
}

func (UnimplementedAliceServiceServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedAliceServiceServer) GetStoreValue(context.Context, *GetStoreValueRequest) (*GetStoreValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreValue not implemented")
}
func (UnimplementedAliceServiceServer) ListTransactionsForAddress(context.Context, *ListTransactionsForAddressRequest) (*ListTransactionsForAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsForAddress not implemented")
}
func (UnimplementedAliceServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedAliceServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedAliceServiceServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedAliceServiceServer) ListBlocks(context.Context, *ListBlocksRequest) (*ListBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlocks not implemented")
}
func (UnimplementedAliceServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}

// UnsafeAliceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AliceServiceServer will
// result in compilation errors.
type UnsafeAliceServiceServer interface {
	mustEmbedUnimplementedAliceServiceServer()
}

func RegisterAliceServiceServer(s grpc.ServiceRegistrar, srv AliceServiceServer) {
	s.RegisterService(&AliceService_ServiceDesc, srv)
}

func _AliceService_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServiceServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.alice.v1.AliceService/ListStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServiceServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliceService_GetStoreValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServiceServer).GetStoreValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.alice.v1.AliceService/GetStoreValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServiceServer).GetStoreValue(ctx, req.(*GetStoreValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliceService_ListTransactionsForAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsForAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServiceServer).ListTransactionsForAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.alice.v1.AliceService/ListTransactionsForAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServiceServer).ListTransactionsForAddress(ctx, req.(*ListTransactionsForAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliceService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.alice.v1.AliceService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliceService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.alice.v1.AliceService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliceService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.alice.v1.AliceService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliceService_ListBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServiceServer).ListBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.alice.v1.AliceService/ListBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServiceServer).ListBlocks(ctx, req.(*ListBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliceService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliceServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.alice.v1.AliceService/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliceServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AliceService_ServiceDesc is the grpc.ServiceDesc for AliceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AliceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.alice.v1.AliceService",
	HandlerType: (*AliceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStores",
			Handler:    _AliceService_ListStores_Handler,
		},
		{
			MethodName: "GetStoreValue",
			Handler:    _AliceService_GetStoreValue_Handler,
		},
		{
			MethodName: "ListTransactionsForAddress",
			Handler:    _AliceService_ListTransactionsForAddress_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _AliceService_GetBalance_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _AliceService_GetTransaction_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _AliceService_GetBlock_Handler,
		},
		{
			MethodName: "ListBlocks",
			Handler:    _AliceService_ListBlocks_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _AliceService_ListTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/alice/v1/alice.proto",
}
