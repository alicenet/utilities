// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/alice/v1/alice.proto

package alicev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListStoresRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListStoresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStoresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStoresRequestMultiError, or nil if none found.
func (m *ListStoresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStoresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListStoresRequest_Address_Pattern.MatchString(m.GetAddress()) {
		err := ListStoresRequestValidationError{
			field:  "Address",
			reason: "value does not match regex pattern \"^[0-9a-fA-F]{64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListStoresRequestMultiError(errors)
	}

	return nil
}

// ListStoresRequestMultiError is an error wrapping multiple validation errors
// returned by ListStoresRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStoresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStoresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStoresRequestMultiError) AllErrors() []error { return m }

// ListStoresRequestValidationError is the validation error returned by
// ListStoresRequest.Validate if the designated constraints aren't met.
type ListStoresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStoresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStoresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStoresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStoresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStoresRequestValidationError) ErrorName() string {
	return "ListStoresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStoresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStoresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStoresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStoresRequestValidationError{}

var _ListStoresRequest_Address_Pattern = regexp.MustCompile("^[0-9a-fA-F]{64}$")

// Validate checks the field values on ListStoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStoresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStoresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStoresResponseMultiError, or nil if none found.
func (m *ListStoresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStoresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListStoresResponseMultiError(errors)
	}

	return nil
}

// ListStoresResponseMultiError is an error wrapping multiple validation errors
// returned by ListStoresResponse.ValidateAll() if the designated constraints
// aren't met.
type ListStoresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStoresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStoresResponseMultiError) AllErrors() []error { return m }

// ListStoresResponseValidationError is the validation error returned by
// ListStoresResponse.Validate if the designated constraints aren't met.
type ListStoresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStoresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStoresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStoresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStoresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStoresResponseValidationError) ErrorName() string {
	return "ListStoresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStoresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStoresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStoresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStoresResponseValidationError{}

// Validate checks the field values on GetStoreValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoreValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoreValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoreValueRequestMultiError, or nil if none found.
func (m *GetStoreValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoreValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetStoreValueRequest_Address_Pattern.MatchString(m.GetAddress()) {
		err := GetStoreValueRequestValidationError{
			field:  "Address",
			reason: "value does not match regex pattern \"^[0-9a-fA-F]{64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetStoreValueRequest_Index_Pattern.MatchString(m.GetIndex()) {
		err := GetStoreValueRequestValidationError{
			field:  "Index",
			reason: "value does not match regex pattern \"^[0-9a-fA-F]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStoreValueRequestMultiError(errors)
	}

	return nil
}

// GetStoreValueRequestMultiError is an error wrapping multiple validation
// errors returned by GetStoreValueRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStoreValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoreValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoreValueRequestMultiError) AllErrors() []error { return m }

// GetStoreValueRequestValidationError is the validation error returned by
// GetStoreValueRequest.Validate if the designated constraints aren't met.
type GetStoreValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoreValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoreValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoreValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoreValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoreValueRequestValidationError) ErrorName() string {
	return "GetStoreValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoreValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoreValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoreValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoreValueRequestValidationError{}

var _GetStoreValueRequest_Address_Pattern = regexp.MustCompile("^[0-9a-fA-F]{64}$")

var _GetStoreValueRequest_Index_Pattern = regexp.MustCompile("^[0-9a-fA-F]+$")

// Validate checks the field values on GetStoreValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStoreValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStoreValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStoreValueResponseMultiError, or nil if none found.
func (m *GetStoreValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStoreValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for IssuedAt

	if len(errors) > 0 {
		return GetStoreValueResponseMultiError(errors)
	}

	return nil
}

// GetStoreValueResponseMultiError is an error wrapping multiple validation
// errors returned by GetStoreValueResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStoreValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStoreValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStoreValueResponseMultiError) AllErrors() []error { return m }

// GetStoreValueResponseValidationError is the validation error returned by
// GetStoreValueResponse.Validate if the designated constraints aren't met.
type GetStoreValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStoreValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStoreValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStoreValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStoreValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStoreValueResponseValidationError) ErrorName() string {
	return "GetStoreValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStoreValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStoreValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStoreValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStoreValueResponseValidationError{}

// Validate checks the field values on ListTransactionsForAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransactionsForAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionsForAddressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransactionsForAddressRequestMultiError, or nil if none found.
func (m *ListTransactionsForAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionsForAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ListTransactionsForAddressRequest_Address_Pattern.MatchString(m.GetAddress()) {
		err := ListTransactionsForAddressRequestValidationError{
			field:  "Address",
			reason: "value does not match regex pattern \"^[0-9a-fA-F]{64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val < 0 || val > 1000 {
		err := ListTransactionsForAddressRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListTransactionsForAddressRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTransactionsForAddressRequestMultiError(errors)
	}

	return nil
}

// ListTransactionsForAddressRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListTransactionsForAddressRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransactionsForAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionsForAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionsForAddressRequestMultiError) AllErrors() []error { return m }

// ListTransactionsForAddressRequestValidationError is the validation error
// returned by ListTransactionsForAddressRequest.Validate if the designated
// constraints aren't met.
type ListTransactionsForAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsForAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsForAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsForAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsForAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsForAddressRequestValidationError) ErrorName() string {
	return "ListTransactionsForAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsForAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsForAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsForAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsForAddressRequestValidationError{}

var _ListTransactionsForAddressRequest_Address_Pattern = regexp.MustCompile("^[0-9a-fA-F]{64}$")

// Validate checks the field values on ListTransactionsForAddressResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTransactionsForAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionsForAddressResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTransactionsForAddressResponseMultiError, or nil if none found.
func (m *ListTransactionsForAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionsForAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTransactionsForAddressResponseMultiError(errors)
	}

	return nil
}

// ListTransactionsForAddressResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListTransactionsForAddressResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransactionsForAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionsForAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionsForAddressResponseMultiError) AllErrors() []error { return m }

// ListTransactionsForAddressResponseValidationError is the validation error
// returned by ListTransactionsForAddressResponse.Validate if the designated
// constraints aren't met.
type ListTransactionsForAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsForAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsForAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsForAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsForAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsForAddressResponseValidationError) ErrorName() string {
	return "ListTransactionsForAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsForAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsForAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsForAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsForAddressResponseValidationError{}

// Validate checks the field values on GetBalanceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalanceRequestMultiError, or nil if none found.
func (m *GetBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetBalanceRequest_Address_Pattern.MatchString(m.GetAddress()) {
		err := GetBalanceRequestValidationError{
			field:  "Address",
			reason: "value does not match regex pattern \"^[0-9a-fA-F]{64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBalanceRequestMultiError(errors)
	}

	return nil
}

// GetBalanceRequestMultiError is an error wrapping multiple validation errors
// returned by GetBalanceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalanceRequestMultiError) AllErrors() []error { return m }

// GetBalanceRequestValidationError is the validation error returned by
// GetBalanceRequest.Validate if the designated constraints aren't met.
type GetBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceRequestValidationError) ErrorName() string {
	return "GetBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceRequestValidationError{}

var _GetBalanceRequest_Address_Pattern = regexp.MustCompile("^[0-9a-fA-F]{64}$")

// Validate checks the field values on GetBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBalanceResponseMultiError, or nil if none found.
func (m *GetBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Balance

	if len(errors) > 0 {
		return GetBalanceResponseMultiError(errors)
	}

	return nil
}

// GetBalanceResponseMultiError is an error wrapping multiple validation errors
// returned by GetBalanceResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBalanceResponseMultiError) AllErrors() []error { return m }

// GetBalanceResponseValidationError is the validation error returned by
// GetBalanceResponse.Validate if the designated constraints aren't met.
type GetBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBalanceResponseValidationError) ErrorName() string {
	return "GetBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBalanceResponseValidationError{}

// Validate checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionRequestMultiError, or nil if none found.
func (m *GetTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetTransactionRequest_Transaction_Pattern.MatchString(m.GetTransaction()) {
		err := GetTransactionRequestValidationError{
			field:  "Transaction",
			reason: "value does not match regex pattern \"^[0-9a-fA-F]{64}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTransactionRequestMultiError(errors)
	}

	return nil
}

// GetTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by GetTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionRequestMultiError) AllErrors() []error { return m }

// GetTransactionRequestValidationError is the validation error returned by
// GetTransactionRequest.Validate if the designated constraints aren't met.
type GetTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionRequestValidationError) ErrorName() string {
	return "GetTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionRequestValidationError{}

var _GetTransactionRequest_Transaction_Pattern = regexp.MustCompile("^[0-9a-fA-F]{64}$")

// Validate checks the field values on GetTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransactionResponseMultiError, or nil if none found.
func (m *GetTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransactionResponseValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransactionResponseValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransactionResponseValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransactionResponseMultiError(errors)
	}

	return nil
}

// GetTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by GetTransactionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransactionResponseMultiError) AllErrors() []error { return m }

// GetTransactionResponseValidationError is the validation error returned by
// GetTransactionResponse.Validate if the designated constraints aren't met.
type GetTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransactionResponseValidationError) ErrorName() string {
	return "GetTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransactionResponseValidationError{}

// Validate checks the field values on GetBlockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBlockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockRequestMultiError, or nil if none found.
func (m *GetBlockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetHeight() <= 0 {
		err := GetBlockRequestValidationError{
			field:  "Height",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBlockRequestMultiError(errors)
	}

	return nil
}

// GetBlockRequestMultiError is an error wrapping multiple validation errors
// returned by GetBlockRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBlockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockRequestMultiError) AllErrors() []error { return m }

// GetBlockRequestValidationError is the validation error returned by
// GetBlockRequest.Validate if the designated constraints aren't met.
type GetBlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockRequestValidationError) ErrorName() string { return "GetBlockRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockRequestValidationError{}

// Validate checks the field values on GetBlockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBlockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBlockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBlockResponseMultiError, or nil if none found.
func (m *GetBlockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBlockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBlock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBlockResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBlockResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBlock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBlockResponseValidationError{
				field:  "Block",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetBlockResponseMultiError(errors)
	}

	return nil
}

// GetBlockResponseMultiError is an error wrapping multiple validation errors
// returned by GetBlockResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBlockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBlockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBlockResponseMultiError) AllErrors() []error { return m }

// GetBlockResponseValidationError is the validation error returned by
// GetBlockResponse.Validate if the designated constraints aren't met.
type GetBlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockResponseValidationError) ErrorName() string { return "GetBlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetBlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockResponseValidationError{}

// Validate checks the field values on ListBlocksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBlocksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBlocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBlocksRequestMultiError, or nil if none found.
func (m *ListBlocksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBlocksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val < 0 || val > 1000 {
		err := ListBlocksRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListBlocksRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListBlocksRequestMultiError(errors)
	}

	return nil
}

// ListBlocksRequestMultiError is an error wrapping multiple validation errors
// returned by ListBlocksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBlocksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBlocksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBlocksRequestMultiError) AllErrors() []error { return m }

// ListBlocksRequestValidationError is the validation error returned by
// ListBlocksRequest.Validate if the designated constraints aren't met.
type ListBlocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBlocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBlocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBlocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBlocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBlocksRequestValidationError) ErrorName() string {
	return "ListBlocksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBlocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBlocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBlocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBlocksRequestValidationError{}

// Validate checks the field values on ListBlocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBlocksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBlocksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBlocksResponseMultiError, or nil if none found.
func (m *ListBlocksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBlocksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBlocksResponseMultiError(errors)
	}

	return nil
}

// ListBlocksResponseMultiError is an error wrapping multiple validation errors
// returned by ListBlocksResponse.ValidateAll() if the designated constraints
// aren't met.
type ListBlocksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBlocksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBlocksResponseMultiError) AllErrors() []error { return m }

// ListBlocksResponseValidationError is the validation error returned by
// ListBlocksResponse.Validate if the designated constraints aren't met.
type ListBlocksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBlocksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBlocksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBlocksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBlocksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBlocksResponseValidationError) ErrorName() string {
	return "ListBlocksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBlocksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBlocksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBlocksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBlocksResponseValidationError{}

// Validate checks the field values on ListTransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransactionsRequestMultiError, or nil if none found.
func (m *ListTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLimit(); val < 0 || val > 1000 {
		err := ListTransactionsRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range [0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOffset() < 0 {
		err := ListTransactionsRequestValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTransactionsRequestMultiError(errors)
	}

	return nil
}

// ListTransactionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListTransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionsRequestMultiError) AllErrors() []error { return m }

// ListTransactionsRequestValidationError is the validation error returned by
// ListTransactionsRequest.Validate if the designated constraints aren't met.
type ListTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsRequestValidationError) ErrorName() string {
	return "ListTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsRequestValidationError{}

// Validate checks the field values on ListTransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransactionsResponseMultiError, or nil if none found.
func (m *ListTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTransactionsResponseMultiError(errors)
	}

	return nil
}

// ListTransactionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListTransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionsResponseMultiError) AllErrors() []error { return m }

// ListTransactionsResponseValidationError is the validation error returned by
// ListTransactionsResponse.Validate if the designated constraints aren't met.
type ListTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionsResponseValidationError) ErrorName() string {
	return "ListTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionsResponseValidationError{}

// Validate checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Block) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Block with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BlockMultiError, or nil if none found.
func (m *Block) ValidateAll() error {
	return m.validate(true)
}

func (m *Block) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainId

	// no validation rules for Height

	// no validation rules for TransactionCount

	// no validation rules for PreviousBlockHash

	// no validation rules for TransactionRootHash

	// no validation rules for StateRootHash

	// no validation rules for HeaderRootHash

	// no validation rules for GroupSignatureHash

	if all {
		switch v := interface{}(m.GetObserveTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BlockValidationError{
					field:  "ObserveTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BlockValidationError{
					field:  "ObserveTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObserveTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlockValidationError{
				field:  "ObserveTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BlockMultiError(errors)
	}

	return nil
}

// BlockMultiError is an error wrapping multiple validation errors returned by
// Block.ValidateAll() if the designated constraints aren't met.
type BlockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockMultiError) AllErrors() []error { return m }

// BlockValidationError is the validation error returned by Block.Validate if
// the designated constraints aren't met.
type BlockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockValidationError) ErrorName() string { return "BlockValidationError" }

// Error satisfies the builtin error interface
func (e BlockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Hash

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Height

	if all {
		switch v := interface{}(m.GetObserveTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "ObserveTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "ObserveTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObserveTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "ObserveTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on Transaction_Input with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Transaction_Input) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction_Input with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Transaction_InputMultiError, or nil if none found.
func (m *Transaction_Input) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction_Input) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChainId

	// no validation rules for TransactionHash

	// no validation rules for TransactionIndex

	// no validation rules for ConsumedTransactionHash

	// no validation rules for ConsumedTransactionIndex

	// no validation rules for Signature

	if len(errors) > 0 {
		return Transaction_InputMultiError(errors)
	}

	return nil
}

// Transaction_InputMultiError is an error wrapping multiple validation errors
// returned by Transaction_Input.ValidateAll() if the designated constraints
// aren't met.
type Transaction_InputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Transaction_InputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Transaction_InputMultiError) AllErrors() []error { return m }

// Transaction_InputValidationError is the validation error returned by
// Transaction_Input.Validate if the designated constraints aren't met.
type Transaction_InputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Transaction_InputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Transaction_InputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Transaction_InputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Transaction_InputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Transaction_InputValidationError) ErrorName() string {
	return "Transaction_InputValidationError"
}

// Error satisfies the builtin error interface
func (e Transaction_InputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction_Input.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Transaction_InputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Transaction_InputValidationError{}

// Validate checks the field values on Transaction_Output with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Transaction_Output) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction_Output with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Transaction_OutputMultiError, or nil if none found.
func (m *Transaction_Output) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction_Output) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.UnspectTransactionOutput.(type) {

	case *Transaction_Output_ValueStore_:

		if all {
			switch v := interface{}(m.GetValueStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Transaction_OutputValidationError{
						field:  "ValueStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Transaction_OutputValidationError{
						field:  "ValueStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetValueStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Transaction_OutputValidationError{
					field:  "ValueStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Transaction_Output_DataStore_:

		if all {
			switch v := interface{}(m.GetDataStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Transaction_OutputValidationError{
						field:  "DataStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Transaction_OutputValidationError{
						field:  "DataStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDataStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Transaction_OutputValidationError{
					field:  "DataStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Transaction_OutputMultiError(errors)
	}

	return nil
}

// Transaction_OutputMultiError is an error wrapping multiple validation errors
// returned by Transaction_Output.ValidateAll() if the designated constraints
// aren't met.
type Transaction_OutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Transaction_OutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Transaction_OutputMultiError) AllErrors() []error { return m }

// Transaction_OutputValidationError is the validation error returned by
// Transaction_Output.Validate if the designated constraints aren't met.
type Transaction_OutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Transaction_OutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Transaction_OutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Transaction_OutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Transaction_OutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Transaction_OutputValidationError) ErrorName() string {
	return "Transaction_OutputValidationError"
}

// Error satisfies the builtin error interface
func (e Transaction_OutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction_Output.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Transaction_OutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Transaction_OutputValidationError{}

// Validate checks the field values on Transaction_Output_ValueStore with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Transaction_Output_ValueStore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction_Output_ValueStore with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Transaction_Output_ValueStoreMultiError, or nil if none found.
func (m *Transaction_Output_ValueStore) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction_Output_ValueStore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionHash

	// no validation rules for ChainId

	// no validation rules for Value

	// no validation rules for TransactionOutIndex

	// no validation rules for Owner

	// no validation rules for Fee

	if len(errors) > 0 {
		return Transaction_Output_ValueStoreMultiError(errors)
	}

	return nil
}

// Transaction_Output_ValueStoreMultiError is an error wrapping multiple
// validation errors returned by Transaction_Output_ValueStore.ValidateAll()
// if the designated constraints aren't met.
type Transaction_Output_ValueStoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Transaction_Output_ValueStoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Transaction_Output_ValueStoreMultiError) AllErrors() []error { return m }

// Transaction_Output_ValueStoreValidationError is the validation error
// returned by Transaction_Output_ValueStore.Validate if the designated
// constraints aren't met.
type Transaction_Output_ValueStoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Transaction_Output_ValueStoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Transaction_Output_ValueStoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Transaction_Output_ValueStoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Transaction_Output_ValueStoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Transaction_Output_ValueStoreValidationError) ErrorName() string {
	return "Transaction_Output_ValueStoreValidationError"
}

// Error satisfies the builtin error interface
func (e Transaction_Output_ValueStoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction_Output_ValueStore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Transaction_Output_ValueStoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Transaction_Output_ValueStoreValidationError{}

// Validate checks the field values on Transaction_Output_DataStore with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Transaction_Output_DataStore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction_Output_DataStore with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Transaction_Output_DataStoreMultiError, or nil if none found.
func (m *Transaction_Output_DataStore) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction_Output_DataStore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signature

	// no validation rules for TransactionHash

	// no validation rules for ChainId

	// no validation rules for Index

	// no validation rules for IssuedAt

	// no validation rules for Deposit

	// no validation rules for RawData

	// no validation rules for TransactionOutIndex

	// no validation rules for Owner

	// no validation rules for Fee

	if len(errors) > 0 {
		return Transaction_Output_DataStoreMultiError(errors)
	}

	return nil
}

// Transaction_Output_DataStoreMultiError is an error wrapping multiple
// validation errors returned by Transaction_Output_DataStore.ValidateAll() if
// the designated constraints aren't met.
type Transaction_Output_DataStoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Transaction_Output_DataStoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Transaction_Output_DataStoreMultiError) AllErrors() []error { return m }

// Transaction_Output_DataStoreValidationError is the validation error returned
// by Transaction_Output_DataStore.Validate if the designated constraints
// aren't met.
type Transaction_Output_DataStoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Transaction_Output_DataStoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Transaction_Output_DataStoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Transaction_Output_DataStoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Transaction_Output_DataStoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Transaction_Output_DataStoreValidationError) ErrorName() string {
	return "Transaction_Output_DataStoreValidationError"
}

// Error satisfies the builtin error interface
func (e Transaction_Output_DataStoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction_Output_DataStore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Transaction_Output_DataStoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Transaction_Output_DataStoreValidationError{}
